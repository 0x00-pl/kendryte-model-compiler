fifo_config:

[io] int_en = interrupt when finish
ram_flag = reserved
full_add = sum results for each output channel
[cv] depth_wise_layer = is depth_wise_layer or not

[io] image_src_addr = i_channels_addr * 64 [image addr]
[io] image_dst_addr = o_channels_addr * 64 [output image addr]

[io] i_ch_num = number of input_channels
[io] o_ch_num = number of output_channels
[io] o_ch_num_coef = number of output_channels once output in memory

[io] i_row_wid
[io] i_col_high
[io] o_row_wid
[io] o_col_high

[cv] kernel_type
[cv] pad_type
[po] pool_type
[io] first_stride = set 1 if cannot fit column
[cv] bypass_conv
[bn] load_para = load BN weihts
[io] dma_burst_size
[cv] pad_value
[bn] bwsx_base_addr = [BN addr]

[cv] load_coor = load conv weights
[cv] load_time = chuncks of each weithts chunck load
[cv] para_size = size of each weights chunck
[cv] para_start_addr = [conv weights addr]

coef_column_offset = 0
coef_row_offset = 0

[io] channel_switch_addr = size_of_channel / 64
[io] row_switch_addr = size_of_image_row / 64
coef_size = reserved
[io] coef_group = how many pixle row contains in 64 bytes
[ac] load_act = load activation
[ac] active_addr = [activation addr]

[io] wb_channel_switch_addr = size_of_output_channel / 64
[io] wb_row_switch_addr = size_of_output_image_row / 64
[io] wb_group =  how many pixle row of output contains in 64 bytes

[cv] shr_w = shr of conv weights
[cv] shr_x = shr of conv pixle
[cv] arg_w = scalar of conv weights
[cv] arg_x = scalar of conv pixle

[cv] arg_add = ((w*arg_w)>>shr_w) * ((x*arg_x)>>shr_x) + arg_add

[io] send_data_out = if using DMA for output
[io] channel_byte_num = size_of_output_channel
[io] dma_total_byte = total byte of DMA transfer


